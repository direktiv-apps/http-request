swagger: "2.0"
info:
  description: Run http-request in Direktiv
  title: http-request
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/http-request
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/http-request/issues
    url: https://github.com/direktiv-apps/http-request  
    categories:
    - network
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      Run http-request in Direktiv as a function
consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            required: ["url"]
            properties:
              url:
                type: string
                example: http://www.direktiv.io
                description: URL for the request.
              method:
                type: string
                enum: ["GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS", "CONNECT", "TRACE", "PATCH"]
                example: POST
                description: HTTP method. Defaults to GET.
              headers:
                type: object
                additionalProperties:
                  type: string
                example:
                  myheader: value
                description: List of key/values send as headers with the request.
              params:
                type: object
                additionalProperties:
                  type: string
                example:
                  query1: queryvalue
                description: List of key/values appended to URL as query parameters.
              username:
                type: string
                example: myuser
                description: If username and password are set, it will be used for basic authenitcation for the request.
              password:
                type: string
                example: mypassword
                description: If username and password are set, it will be used for basic authenitcation for the request. 
              insecure:
                type: boolean
                example: true
                description: Skips the verification the server certificate chain and host name.
              error200:
                type: boolean
                example: true
                description: If set to `true` responses with status above 299 will be treated as errors.
              debug:
                type: boolean
                example: true
                description: Prints the full URL and headers to logs.
              content:
                type: object
                properties:
                  kind:
                    type: string
                    enum: ["string", "file", "base64", "json"]
                    description: Kind of data
                    default: json
                  value:
                    type: object
                    description: Value depends on `kind` value.
                example:
                  kind: string
                  value: This is the payload
                description: |-
                   Defines the payload of the request. The `kind` value can have three different values: 
                    - string: Plain string payload, e.g. JSON
                    - base64: Will be "converted" to binary and attached
                    - file: File payload, e.g. instance or workflow variables
                    - json: Treat the value as JSON key/values
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
        - id: http-request
          image: gcr.io/direktiv/functions/http-request:1.0
          type: knative-workflow
      x-direktiv-examples:
        # ADD MORE EXAMPLES HERE
        - title: Basic
          content: |-
            - id: http-request
              type: action
              action:
                function: http-request
                input: 
                  debug: true
                  url: 'https://www.direktiv.io'
                  params:
                    hello: world
                    hello1: world2
        - title: POST Request
          content: |-
            - id: http-request
              type: action
              action:
                function: http-request
                input: 
                  url: 'https://www.direktiv.io'
                  method: POST
                  headers:
                    header1: value1
                    header2: value2
        - title: POST Request with JSON
          content: |-
            - id: http-request
              type: action
              action:
                function: http-request
                input: 
                  url: 'https://www.direktiv.io'
                  method: POST
                  content:
                    value:
                      hello: world  
                      my: data
        - title: POST Request with file
          content: |-
            - id: http-request
              type: action
              action:
                function: http-request
                input: 
                  url: 'https://www.direktiv.io'
                  method: POST
                  content:
                    kind: string
                    value: 'This is the payload'
        - title: Treat 404 as error
          content: |-
            - id: http-request
              type: action
              action:
                function: http-request
                input: 
                  url: 'https://www.direktiv.io/doesnotexist'
                  error200: true
              catch:
              - error: "*"                  
      x-direktiv:  
        cmds:
        - action: http
          url: |-
            {{ .URL }}
            {{- if .Params }}?
            {{- range $i,$e := .Params }}{{ urlquery $i }}={{ urlquery $e }}{{ if $i }}&{{ end }}{{- end }}
            {{- end }}
          method: '{{ default "get" .Method }}'
          runtime-headers: .Headers
          username: '{{ default "" .Username }}'
          password: '{{ default "" .Password }}'
          errorNo200: '{{ .Error200 }}'
          debug: '{{ .Debug }}'
          data:
            kind: |-
              {{- if .Content }}
              {{- default "json" .Content.Kind }}
              {{- end }}
            value: |-
              {{- if .Content }}
              {{ $content := (default "" .Content.Value) }}
              {{- if eq (deref (default "json" .Content.Kind)) "json" }}
              {{- $content | toJson }}
              {{- else }}
              {{- $content }}
              {{- end }}
              {{- end }}
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed commands.
          examples:
            plain:
              code: 200
              headers:
                Access-Control-Allow-Origin: "*"
                Content-Type: text/html
              result: KXx8T2JqZWN0LmR...
              success: true 
          schema:
            type: object
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
