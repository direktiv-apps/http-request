swagger: "2.0"
info:
  description: Executes HTTP requests from Direktiv
  title: http-request
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/apps/http-request
    maintainer: |-
      [direktiv.io](https://www.direktiv.io)
    url: https://github.com/direktiv-apps/http-request
    categories: 
    - network
    issues: https://github.com/direktiv-apps/http-request/issues
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: |-
      This function executes HTTP requests. Query parameters, data payloads and custom headers are supported. The payload can be a string, 
      base64 or a file. It can be configured to return errors if the response status is not 2xx and it can be configured to ignore SSL errors in
      case of self-signed certificates. 
consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      x-direktiv-function: |-
        functions:
          - id: request
            image: gcr.io/direktiv/apps/http-request:1.0
            type: knative-workflow
      x-direktiv-examples:
        - title: Basic
          content: |-
            - id: req
                 type: action
                 action:
                   function: request
                 input: 
                  url: "http://www.direktiv.io"
        - title: Post Request
          content: |-
             - id: req
                 type: action
                 action:
                   function: request
                 input: 
                  url: http://www.direktiv.io
                  method: post
        - title: Request with File
          content: |-
            - id: set
                 type: setter
                 variables:
                 - key: myfile
                   scope: workflow
                   mimeType: text/plain
                   value: This Is The Data
                 transition: send
            - id: send 
                 type: action
                 action:
                   function: post
                   files:
                     - key: myfile
                       scope: workflow
                       as: myfile.txt
                   input: 
                     url: "https://webhook.site"
                     content: 
                       kind: file
                       value: myfile.txt
        - title: Request with Basic Authentication
          content: |-
            - id: getter 
                 type: action
                 action:
                   secrets: ["mypassword"]
                   function: get
                   input: 
                     url: "https://webhook.site
                     user: admin
                     password: jq(.secrets.mypassword)
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                example: http://www.direktiv.io
                description: URL for the request.
              method:
                type: string
                enum: ["GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS", "CONNECT", "TRACE", "PATCH"]
                example: POST
                description: HTTP method. Defaults to GET.
              headers:
                type: object
                additionalProperties:
                  type: string
                example:
                  myheader: value
                description: List of key/values send as headers with the request.
              params:
                type: object
                additionalProperties:
                  type: string
                example:
                  query1: queryvalue
                description: List of key/values appended to URL as query parameters.
              username:
                type: string
                example: myuser
                description: If username and password are set, it will be used for basic authenitcation for the request.
              password:
                type: string
                example: mypassword
                description: If username and password are set, it will be used for basic authenitcation for the request. 
              insecure:
                type: boolean
                example: true
                description: Skips the verification the server certificate chain and host name.
              error200:
                type: boolean
                example: true
                description: If set to `true` responses with status above 299 will be treated as errors.
              content:
                type: object
                properties:
                  kind:
                    type: string
                    enum: ["string", "file", "base64"]
                    description: Kind of data
                    default: string
                  value:
                    type: string
                    description: Value depends on `kind` value.
                example:
                  kind: string
                  value: This is the payload
                description: |-
                   Defines the payload of the request. The `kind` value can have three different values: 
                    - string: Plain string payload, e.g. JSON
                    - base64: Will be "converted" to binary and attached
                    - file: File payload
      # direktiv code generation is configured here
      x-direktiv:  
        debug: true
        cmds:
        - action: http
          url: |-
            {{ .URL }}
            {{- if .Params }}?
            {{- range $i,$e := .Params }}{{ urlquery $i }}={{ urlquery $e }}{{- end }}
            {{- end }}
          method: '{{ default "get" .Method }}'
          runtime-headers: .Headers
          username: '{{ default "" .Username }}'
          password: '{{ default "" .Password }}'
          errorNo200: '{{ .Error200 }}'
          data:
            kind: '{{ default "string" .Content.Kind }}'
            value: '{{ .Content.Value }}'
        output: '{{ index . 0 | toJson }}'
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
         description: |-
          Returns headers and content of the requested URL. If the response is JSON it will be returned as JSON. 
          If it is not JSON the content is returned as base64 encoded string.
         examples: 
            greeting: 
              code: 200
              headers:
                Content-Type:
                - text/plain; charset=UTF-8
              status: 200 OK
              success: true
         schema:
            type: object
            properties:
              code:
                type: integer
                format: int64
                description: http response code
                example: 200
              result:
                type: string
                example: { "json": "response" }
                description: JSON or base64 content of the response
              success:  
                type: boolean
                description: Indicates successful or unsuccessful execution of the request
                example: true
              status: 
                type: string
                example: 200 OK
                description: test representation of status
              headers:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                example:
                  content-type: application/json
                description: Key/Value map of response headers
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
